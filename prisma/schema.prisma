// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Table Users
model User {
  id        BigInt      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  userId            BigInt
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           BigInt   @id @default(autoincrement())
  sessionToken String   @unique
  userId       BigInt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

// Enum for User Roles
enum Role {
  USER
  ADMIN
}

// Table Category
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  products  Product[]
}

// Table Product
model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]
}

// Table Order
model Order {
  id        Int      @id @default(autoincrement())
  userId    BigInt
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

// Table of Items Order
model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
}
